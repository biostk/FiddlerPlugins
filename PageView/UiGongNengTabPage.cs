using System;
using System.Collections.Generic;
using System.Security.Policy;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Fiddler;

namespace FiddlerPlugins
{
    public partial class UiGongNengTabPage : UserControl
    {
        private List<Session> _sessionList = new List<Session>();

        public bool _module = true; //true = WinHttpR / False = WinHttpW


        public UiGongNengTabPage()
        {
            InitializeComponent();
            this.uiRadioButton1WinHttpR.Checked = true;
        }

        private void UserControl1_Load(object sender, EventArgs e)
        {
        }

        /// <summary>
        /// 接收拖放数据处理
        /// </summary>
        /// <param name="sessions"></param>
        private void ProcessSessions(Session[] sessions)
        {
            // 在这里处理会话数据，例如显示在自定义页面上
            foreach (var session in sessions)
            {
#if DEBUG
                this.uiTextBox1.Text = session.ToString(false);
#endif
                this._sessionList.Add(session);
                this.uiListBox1.Items.Add(session.url);
            }
        }

        /// <summary>
        /// 会话列表增加触发事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uiListBox1_ItemsAdd(object sender, EventArgs e)
        {
            //todo 增加会话列表事件处理
        }


        /// <summary>
        /// 拖放过程中事件，赋值允许拖放
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uiListBox1_DragEnter(object sender, DragEventArgs e)
        {
            // 检查拖放数据是否包含会话信息
            if (e.Data.GetDataPresent(typeof(SessionData[])))
            {
                e.Effect = DragDropEffects.All;
            }
        }


        /// <summary>
        /// 获取到拖放会话列表处理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uiListBox1_DragDrop(object sender, DragEventArgs e)
        {
            // 获取拖放的会话数据
            Session[] sessions = (Session[])e.Data.GetData(typeof(Session[]));
            // 处理会话数据
            ProcessSessions(sessions);
        }


        /// <summary>
        /// 双击删除指定会话列表
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uiListBox1_DoubleClick(object sender, EventArgs e)
        {
            int index = uiListBox1.SelectedIndex;
            if (index == -1)
            {
                return;
            }

            //会话列表同步删除
            uiListBox1.Items.RemoveAt(index);
            _sessionList.RemoveAt(index);
        }

        /// <summary>
        /// 一键生成代码
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uiButton1_Click(object sender, EventArgs e)
        {
            //todo 一键生成代码
            Task.Run(async () =>
            {
                uiTextBox1.Text = AutoGenerateCode().Result;
            });
            
        }

        private async Task<string> AutoGenerateCode()
        {
            StringBuilder stringBuilderCode = new StringBuilder();
            StringBuilder stringBuilderRequest = new StringBuilder();
            StringBuilder stringBuilderHeader = new StringBuilder();
            StringBuilder stringBuilderData = new StringBuilder();

            foreach (var session in _sessionList)
            {
                stringBuilderRequest = AutoGenerateRequest(session);
                stringBuilderHeader = AutoGenerateHeader(session);
                stringBuilderData = AutoGenerateData(session);
                stringBuilderCode.Append((stringBuilderRequest.ToString() + "\r\n" + stringBuilderHeader.ToString() +
                                         "\r\n" +
                                         stringBuilderData.ToString() + "\r\n").Replace("+\"\"",""));
            }

            return stringBuilderCode.ToString();
        }

        private StringBuilder AutoGenerateRequest(Session session)
        {
            string host = session.host;
            string queryUrl = session.url;
            string queryData = string.Empty;
            bool isHttps = session.isHTTPS;
            string funName = String.Empty;
            string method = session.RequestMethod;
            StringBuilder stringBuilder = new StringBuilder();

            //判断是否是GET查询
            if (queryUrl.Contains("?"))
            {
                string[] pathAndQuery = session.url.Split(new string[] { "?" }, StringSplitOptions.None);
                queryUrl = pathAndQuery[0];
                queryData = pathAndQuery[1];
            }
            else
            {
                queryUrl = session.url;
            }

            string[] funNames = queryUrl.Split('/');
            int index = funNames.Length;
            funName = funNames[index - 1];
            stringBuilder.AppendFormat(".子程序 {0}, 文本型, 公开, 备注\r\n", funName);

            string[] stringHangs = queryData.Split('&');
            if (queryData.Contains("="))
            {
                queryData = String.Empty;
                foreach (var stringHang in stringHangs)
                {
                    string[] pairs = stringHang.Split('=');
                    if (pairs.Length == 2)
                    {
                        string key = Uri.UnescapeDataString(pairs[0]);
                        string value = Uri.UnescapeDataString(pairs[1]);
                        stringBuilder.AppendFormat(".参数 {0}, 文本型, 可空, {1}\r\n", key, value);
                        if (pairs[1].Contains("%"))
                        {
                            queryData += string.Format("{0}=\"+URLEncodeUtf8 ({1})+\"", key, key);
                        }
                        else
                        {
                            if (queryData == String.Empty)
                            {
                                queryData += string.Format("{0}=\"+{1}+\"", key, key);
                            }
                            else
                            {
                                queryData += "&" + string.Format("{0}=\"+{1}+\"", key, key);
                            }
                        }
                    }
                }
            }

            stringBuilder.AppendFormat(".局部变量 {0}, {1}, , \"\", {2}\r\n", "http",
                this._module ? "WinHttpR" : "WinHttpW", "");
            stringBuilder.AppendFormat(".局部变量 {0}, 文本型, , \"\", {1}\r\n", "url", "");
            stringBuilder.AppendFormat(".局部变量 {0}, 文本型, , \"\", {1}\r\n", "method", "");
            stringBuilder.AppendFormat(".局部变量 {0}, 字节集, , \"\", {1}\r\n", "byteData", "");
            stringBuilder.AppendFormat(".局部变量 {0}, 文本型, , \"\", {1}\r\n", "textData", "");
            stringBuilder.AppendFormat(".局部变量 {0}, 文本型, , \"\", {1}\r\n", "postData", "");
            stringBuilder.AppendFormat(".局部变量 {0}, zyJsonValue, , \"\", {1}\r\n", "Json", "");

            stringBuilder.AppendFormat("method = \"{0}\"\r\n", method);

            if (queryData == String.Empty)
            {
                stringBuilder.AppendFormat("url = \"{0}{1}\"\r\n", isHttps ? "https://" : "http://", queryUrl);
            }
            else
            {
                stringBuilder.AppendFormat("url = \"{0}{1}?{2}\"\r\n", isHttps ? "https://" : "http://", queryUrl,
                    queryData);
            }
            return stringBuilder;
        }

        private StringBuilder AutoGenerateHeader(Session session)
        {
            StringBuilder stringBuilder = new StringBuilder();
            foreach (var requestHeader in session.RequestHeaders)
            {
                if (requestHeader.Name == "Cookie")
                {
                    stringBuilder.AppendFormat("http.SetCookie (“{0}”, “{1}”)\r\n", requestHeader.Name,
                        requestHeader.Value.Replace("\"", "\" + #引号 + \""));
                }
                else
                {
                    stringBuilder.AppendFormat("http.SetRequestHeader (“{0}”, “{1}”)\r\n", requestHeader.Name,
                        requestHeader.Value.Replace("\"", "\" + #引号 + \""));
                }
            }
#if DEBUG
            FiddlerApplication.Log.LogString(stringBuilder.ToString());
#endif
            return stringBuilder;
        }

        private StringBuilder AutoGenerateData(Session session)
        {
            StringBuilder stringBuilder = new StringBuilder();
            string textData = session.GetRequestBodyAsString();
            stringBuilder.AppendFormat(textData + "\r\n");

            return stringBuilder;
        }

        //一键复制至剪辑板
        private void uiButton2_Click(object sender, EventArgs e)
        {
            //todo 一键复制到剪辑板
        }

        /// <summary>
        /// 获取Fiddler列备注
        /// </summary>
        /// <returns></returns>
        private int GetCommentsIndex()
        {
            int count = FiddlerApplication.UI.lvSessions.Columns.Count;
            int index = -1;
            for (int i = 0; i < count; i++)
            {
                if (FiddlerApplication.UI.lvSessions.Columns[i].Text == "Comments")
                {
                    index = i;
                    break;
                }
            }

            return index;
        }
    }
}